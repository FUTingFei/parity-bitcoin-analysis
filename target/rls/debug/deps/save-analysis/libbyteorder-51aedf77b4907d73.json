{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0","program":"/Users/ftf/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","byteorder","/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","panic=abort","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=51aedf77b4907d73","-C","extra-filename=-51aedf77b4907d73","--out-dir","/Users/ftf/workspace/parity-bitcoin-analysis/target/rls/debug/deps","-L","dependency=/Users/ftf/workspace/parity-bitcoin-analysis/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/ftf/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/ftf/workspace/parity-bitcoin-analysis/target/rls/debug/deps/libbyteorder-51aedf77b4907d73.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[11115144818204638434,12360873146223016295]},"crate_root":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src","external_crates":[{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8106311790213343624,8955386895799845337]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4005401412862751838,10428951584609828155]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13095010483096482717,4206053056286564539]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11763715825204258428,844497751288077839]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12828643918913867774,11782824976344281294]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6904254435091247090,18371361969673227101]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4378847577036072991,15026153357663168629]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11052382395475291102,13781871357446175268]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10846364115163072086,995811513296267536]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5237820243614741634,12979549998808708609]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[9343187026477242795,15227309607718994713]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7288168950848637900,4057641189599078398]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[10668628030226272726,236080469054931654]}},{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8067095231028320138,1808744449370434750]}}],"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":0,"byte_end":100281,"line_start":1,"line_end":3191,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":1623,"byte_end":1635,"line_start":54,"line_end":54,"column_start":14,"column_end":26},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":1637,"byte_end":1650,"line_start":54,"line_end":54,"column_start":28,"column_end":41},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":0,"byte_end":100281,"line_start":1,"line_end":3191,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":136},{"krate":0,"index":250},{"krate":0,"index":265},{"krate":0,"index":264},{"krate":0,"index":262},{"krate":0,"index":260},{"krate":0,"index":257},{"krate":0,"index":255},{"krate":0,"index":253},{"krate":0,"index":251},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":267},{"krate":0,"index":282},{"krate":0,"index":281},{"krate":0,"index":279},{"krate":0,"index":277},{"krate":0,"index":274},{"krate":0,"index":272},{"krate":0,"index":270},{"krate":0,"index":268},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":220},{"krate":0,"index":242},{"krate":0,"index":246}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":1201,"byte_end":1223,"line_start":39,"line_end":39,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":101031,"byte_end":101043,"line_start":25,"line_end":25,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81}],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":101838,"byte_end":101845,"line_start":50,"line_end":50,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"fn (&mut self) -> Result<u8>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":101821,"byte_end":101830,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":102756,"byte_end":102763,"line_start":80,"line_end":80,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"fn (&mut self) -> Result<i8>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":102739,"byte_end":102748,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":103592,"byte_end":103600,"line_start":107,"line_end":107,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"fn <T> (&mut self) -> Result<u16>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":103575,"byte_end":103584,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":104457,"byte_end":104465,"line_start":134,"line_end":134,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"fn <T> (&mut self) -> Result<i16>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":104440,"byte_end":104449,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":105257,"byte_end":105265,"line_start":160,"line_end":160,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":105240,"byte_end":105249,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":106055,"byte_end":106063,"line_start":186,"line_end":186,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":106038,"byte_end":106047,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":106861,"byte_end":106869,"line_start":212,"line_end":212,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":106844,"byte_end":106853,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":107665,"byte_end":107673,"line_start":238,"line_end":238,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":107648,"byte_end":107657,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":108509,"byte_end":108517,"line_start":264,"line_end":264,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":108492,"byte_end":108501,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":109327,"byte_end":109335,"line_start":290,"line_end":290,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":109310,"byte_end":109319,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":112016,"byte_end":112025,"line_start":373,"line_end":373,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"fn <T> (&mut self, nbytes: usize) -> Result<u64>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":111999,"byte_end":112008,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":112855,"byte_end":112863,"line_start":398,"line_end":398,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"fn <T> (&mut self, nbytes: usize) -> Result<i64>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":112838,"byte_end":112847,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":114484,"byte_end":114492,"line_start":447,"line_end":447,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"fn <T> (&mut self) -> Result<f32>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":114467,"byte_end":114476,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":115435,"byte_end":115443,"line_start":478,"line_end":478,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"fn <T> (&mut self) -> Result<f64>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":115418,"byte_end":115427,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":116484,"byte_end":116497,"line_start":510,"line_end":510,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"fn <T> (&mut self, dst: &mut [u16]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":116467,"byte_end":116476,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":117631,"byte_end":117644,"line_start":545,"line_end":545,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"fn <T> (&mut self, dst: &mut [u32]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":117614,"byte_end":117623,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":118837,"byte_end":118850,"line_start":583,"line_end":583,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"fn <T> (&mut self, dst: &mut [u64]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":118820,"byte_end":118829,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":121280,"byte_end":121293,"line_start":660,"line_end":660,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"fn <T> (&mut self, dst: &mut [i16]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":121263,"byte_end":121272,"line_start":659,"line_end":659,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":122423,"byte_end":122436,"line_start":695,"line_end":695,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"fn <T> (&mut self, dst: &mut [i32]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":122406,"byte_end":122415,"line_start":694,"line_end":694,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":123625,"byte_end":123638,"line_start":733,"line_end":733,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"fn <T> (&mut self, dst: &mut [i64]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":123608,"byte_end":123617,"line_start":732,"line_end":732,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":126537,"byte_end":126560,"line_start":824,"line_end":824,"column_start":15,"column_end":38},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":126513,"byte_end":126522,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":128211,"byte_end":128234,"line_start":876,"line_end":876,"column_start":15,"column_end":38},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":128187,"byte_end":128196,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":85},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":129243,"byte_end":129256,"line_start":911,"line_end":911,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121}],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":129701,"byte_end":129709,"line_start":923,"line_end":923,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"fn (&mut self, n: u8) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":129684,"byte_end":129693,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":130208,"byte_end":130216,"line_start":938,"line_end":938,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"fn (&mut self, n: i8) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":130191,"byte_end":130200,"line_start":937,"line_end":937,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":130589,"byte_end":130598,"line_start":950,"line_end":950,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"fn <T> (&mut self, n: u16) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":130572,"byte_end":130581,"line_start":949,"line_end":949,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":131042,"byte_end":131051,"line_start":964,"line_end":964,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"fn <T> (&mut self, n: i16) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":131025,"byte_end":131034,"line_start":963,"line_end":963,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":131498,"byte_end":131507,"line_start":978,"line_end":978,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":131481,"byte_end":131490,"line_start":977,"line_end":977,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":131951,"byte_end":131960,"line_start":992,"line_end":992,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":131934,"byte_end":131943,"line_start":991,"line_end":991,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":132407,"byte_end":132416,"line_start":1006,"line_end":1006,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":132390,"byte_end":132399,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":132860,"byte_end":132869,"line_start":1020,"line_end":1020,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":132843,"byte_end":132852,"line_start":1019,"line_end":1019,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":133316,"byte_end":133325,"line_start":1034,"line_end":1034,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":133299,"byte_end":133308,"line_start":1033,"line_end":1033,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":133769,"byte_end":133778,"line_start":1048,"line_end":1048,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":133752,"byte_end":133761,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":134967,"byte_end":134977,"line_start":1085,"line_end":1085,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"fn <T> (&mut self, n: u64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":134950,"byte_end":134959,"line_start":1084,"line_end":1084,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":135666,"byte_end":135675,"line_start":1108,"line_end":1108,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"fn <T> (&mut self, n: i64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":135649,"byte_end":135658,"line_start":1107,"line_end":1107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":137238,"byte_end":137247,"line_start":1159,"line_end":1159,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"fn <T> (&mut self, n: f32) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":137221,"byte_end":137230,"line_start":1158,"line_end":1158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":137527,"byte_end":137536,"line_start":1168,"line_end":1168,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"fn <T> (&mut self, n: f64) -> Result<()>","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":137510,"byte_end":137519,"line_start":1167,"line_end":1167,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":133},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":3413,"byte_end":3419,"line_start":147,"line_end":147,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":136},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4573,"byte_end":4582,"line_start":184,"line_end":184,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4817,"byte_end":4825,"line_start":193,"line_end":193,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":5334,"byte_end":5342,"line_start":212,"line_end":212,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":5875,"byte_end":5883,"line_start":233,"line_end":233,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":6370,"byte_end":6378,"line_start":252,"line_end":252,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":7453,"byte_end":7462,"line_start":292,"line_end":292,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":8574,"byte_end":8583,"line_start":332,"line_end":332,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":9100,"byte_end":9109,"line_start":351,"line_end":351,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":9654,"byte_end":9663,"line_start":372,"line_end":372,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":10158,"byte_end":10167,"line_start":391,"line_end":391,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":11297,"byte_end":11307,"line_start":431,"line_end":431,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":12473,"byte_end":12481,"line_start":472,"line_end":472,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":12456,"byte_end":12465,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":13045,"byte_end":13053,"line_start":494,"line_end":494,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":13028,"byte_end":13037,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":13598,"byte_end":13606,"line_start":516,"line_end":516,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":13581,"byte_end":13590,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":14156,"byte_end":14164,"line_start":538,"line_end":538,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":14139,"byte_end":14148,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":15356,"byte_end":15364,"line_start":584,"line_end":584,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":15339,"byte_end":15348,"line_start":583,"line_end":583,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":16770,"byte_end":16778,"line_start":634,"line_end":634,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":16753,"byte_end":16762,"line_start":633,"line_end":633,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":17485,"byte_end":17493,"line_start":660,"line_end":660,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":17468,"byte_end":17477,"line_start":659,"line_end":659,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":18045,"byte_end":18054,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":18028,"byte_end":18037,"line_start":681,"line_end":681,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":18630,"byte_end":18639,"line_start":704,"line_end":704,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":18613,"byte_end":18622,"line_start":703,"line_end":703,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":19196,"byte_end":19205,"line_start":726,"line_end":726,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":19179,"byte_end":19188,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":19767,"byte_end":19776,"line_start":748,"line_end":748,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":19750,"byte_end":19759,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":21031,"byte_end":21040,"line_start":794,"line_end":794,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":21014,"byte_end":21023,"line_start":793,"line_end":793,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":22403,"byte_end":22412,"line_start":841,"line_end":841,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":22386,"byte_end":22395,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":23021,"byte_end":23030,"line_start":864,"line_end":864,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":23004,"byte_end":23013,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":23765,"byte_end":23778,"line_start":889,"line_end":889,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":24458,"byte_end":24471,"line_start":912,"line_end":912,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":25151,"byte_end":25164,"line_start":935,"line_end":935,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":26582,"byte_end":26595,"line_start":983,"line_end":983,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":26565,"byte_end":26574,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":27355,"byte_end":27368,"line_start":1009,"line_end":1009,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":27338,"byte_end":27347,"line_start":1008,"line_end":1008,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":28128,"byte_end":28141,"line_start":1035,"line_end":1035,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":28111,"byte_end":28120,"line_start":1034,"line_end":1034,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":30156,"byte_end":30179,"line_start":1097,"line_end":1097,"column_start":15,"column_end":38},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":30132,"byte_end":30141,"line_start":1096,"line_end":1096,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":31373,"byte_end":31396,"line_start":1132,"line_end":1132,"column_start":15,"column_end":38},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":31349,"byte_end":31358,"line_start":1131,"line_end":1131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":32133,"byte_end":32147,"line_start":1157,"line_end":1157,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":32828,"byte_end":32842,"line_start":1180,"line_end":1180,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":33523,"byte_end":33537,"line_start":1203,"line_end":1203,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":34946,"byte_end":34960,"line_start":1250,"line_end":1250,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":35708,"byte_end":35722,"line_start":1275,"line_end":1275,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":36470,"byte_end":36484,"line_start":1300,"line_end":1300,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":38128,"byte_end":38142,"line_start":1354,"line_end":1354,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":38987,"byte_end":39001,"line_start":1382,"line_end":1382,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":39783,"byte_end":39797,"line_start":1407,"line_end":1407,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":40502,"byte_end":40516,"line_start":1430,"line_end":1430,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":41221,"byte_end":41235,"line_start":1453,"line_end":1453,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":42745,"byte_end":42759,"line_start":1503,"line_end":1503,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (numbers: &mut [i16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":42728,"byte_end":42737,"line_start":1502,"line_end":1502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":43544,"byte_end":43558,"line_start":1529,"line_end":1529,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (numbers: &mut [i32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":43527,"byte_end":43536,"line_start":1528,"line_end":1528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":44343,"byte_end":44357,"line_start":1555,"line_end":1555,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (numbers: &mut [i64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":44326,"byte_end":44335,"line_start":1554,"line_end":1554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":45754,"byte_end":45768,"line_start":1597,"line_end":1597,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46223,"byte_end":46237,"line_start":1608,"line_end":1608,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":250},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46748,"byte_end":46757,"line_start":1628,"line_end":1628,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46739,"byte_end":46760,"line_start":1628,"line_end":1628,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46739,"byte_end":46760,"line_start":1628,"line_end":1628,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":187},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46911,"byte_end":46913,"line_start":1637,"line_end":1637,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `BigEndian`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":267},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":47428,"byte_end":47440,"line_start":1656,"line_end":1656,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":47419,"byte_end":47443,"line_start":1656,"line_end":1656,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":47419,"byte_end":47443,"line_start":1656,"line_end":1656,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":190},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":47606,"byte_end":47608,"line_start":1665,"line_end":1665,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `LittleEndian`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":191},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":48288,"byte_end":48301,"line_start":1689,"line_end":1689,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":192},"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":48501,"byte_end":48513,"line_start":1696,"line_end":1696,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":48459,"byte_end":48491,"line_start":1695,"line_end":1695,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":128612,"byte_end":128613,"line_start":891,"line_end":891,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":137825,"byte_end":137826,"line_start":1177,"line_end":1177,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":3449,"byte_end":3461,"line_start":148,"line_end":148,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":3492,"byte_end":3501,"line_start":149,"line_end":149,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46779,"byte_end":46788,"line_start":1630,"line_end":1630,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":47462,"byte_end":47474,"line_start":1658,"line_end":1658,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":50640,"byte_end":50649,"line_start":1772,"line_end":1772,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":56208,"byte_end":56220,"line_start":1983,"line_end":1983,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":101049,"byte_end":101053,"line_start":25,"line_end":25,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":2764},"to":{"krate":0,"index":26}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":128612,"byte_end":128613,"line_start":891,"line_end":891,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":84},"to":{"krate":0,"index":26}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":129262,"byte_end":129267,"line_start":911,"line_end":911,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2814},"to":{"krate":0,"index":85}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/io.rs","byte_start":137825,"byte_end":137826,"line_start":1177,"line_end":1177,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":125},"to":{"krate":0,"index":85}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":3449,"byte_end":3461,"line_start":148,"line_end":148,"column_start":28,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":267},"to":{"krate":0,"index":133}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":3492,"byte_end":3501,"line_start":149,"line_end":149,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":250},"to":{"krate":0,"index":133}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4589,"byte_end":4594,"line_start":185,"line_end":185,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2056},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4597,"byte_end":4601,"line_start":185,"line_end":185,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1445},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4604,"byte_end":4609,"line_start":185,"line_end":185,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":6824},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4612,"byte_end":4619,"line_start":185,"line_end":185,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2080},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4622,"byte_end":4624,"line_start":185,"line_end":185,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1940},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4627,"byte_end":4631,"line_start":185,"line_end":185,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":6481},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4634,"byte_end":4637,"line_start":185,"line_end":185,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1960},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4640,"byte_end":4649,"line_start":185,"line_end":185,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1936},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4652,"byte_end":4662,"line_start":185,"line_end":185,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":1970},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":4678,"byte_end":4684,"line_start":186,"line_end":186,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":133},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":46779,"byte_end":46788,"line_start":1630,"line_end":1630,"column_start":18,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":250},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":47462,"byte_end":47474,"line_start":1658,"line_end":1658,"column_start":18,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":50640,"byte_end":50649,"line_start":1772,"line_end":1772,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":250},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/ftf/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.1.0/src/lib.rs","byte_start":56208,"byte_end":56220,"line_start":1983,"line_end":1983,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":267},"to":{"krate":0,"index":136}}]}